<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cryo-Nyx Blog]]></title>
  <link href="http://blog.cryonyx.tk/atom.xml" rel="self"/>
  <link href="http://blog.cryonyx.tk/"/>
  <updated>2013-08-01T13:02:55+08:00</updated>
  <id>http://blog.cryonyx.tk/</id>
  <author>
    <name><![CDATA[Cryonyx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用Geek的方式来写博客(1)：在Github上搭建Octopress]]></title>
    <link href="http://blog.cryonyx.tk/blog/2013/08/01/building-octopress-blog/"/>
    <updated>2013-08-01T10:45:00+08:00</updated>
    <id>http://blog.cryonyx.tk/blog/2013/08/01/building-octopress-blog</id>
    <content type="html"><![CDATA[<h3 id="octopress">1.安装Octopress</h3>
<p>这里给出<a href="http://octopress.org/docs/setup/">官方教程</a>的链接，本博文的教程和官方的几乎一致，不过在一些细节上会进行更详细的解说。</p>

<p>如果你还不知道git是什么的话，那么<a href="http://www.open-open.com/lib/view/open1328069609436.html">这里</a>有一份中文详细教程，可以让你对git有一个大致全面的了解。</p>

<p>首先，搭建的环境是在Linux下（我使用的是Archlinux）。据说因为ruby的发展过于迅猛，导致了短时间内大量版本层出不穷，各种ruby脚本基于各种不同的ruby版本被写出来，这就导致了版本依赖方面略微复杂。所以一般并不推荐直接安装ruby，而是安装<a href="http://octopress.org/docs/setup/rbenv/">rbenv</a>或者<a href="http://octopress.org/docs/setup/rvm/">RVM</a>，用它们来进行ruby的版本控制。</p>

<p>上面已经给出了<code>rbenv</code>和<code>RVM</code>的安装指南链接，不过这里还是稍微讲一下，当然是针对我用的<code>rbenv</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装rbenv</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span>
</span><span class="line">git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.zshrc <span class="c">#我使用的是zsh，bash或其他shell的用户需要进行相应更改</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.zshrc
</span><span class="line">git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class="line"><span class="nb">source</span> ~/.zshrc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于最新版的Octopress来说，使用<code>rbenv</code>进行安装的话需要安装<code>ruby-1.9.3-p194</code>，而不是官方所说的<code>1.9.3-p0</code>。更新版的ruby是否能用，我没有进行过尝试。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rbenv install 1.9.3-p194
</span><span class="line">rbenv rehash
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行<code>ruby --version</code>查看是否已经成功安装了指定版本的ruby。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>查看ruby版本</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ruby --version
</span><span class="line">rbenv: ruby: <span class="nb">command </span>not found
</span><span class="line">
</span><span class="line">The <span class="sb">`</span>ruby<span class="err">&#39;</span> <span class="nb">command </span>exists in these Ruby versions:
</span><span class="line">  1.9.3-p194
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ruby搞定了，接下来就该把Octopress从Github上拖回来了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Clone Octopress</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git clone git://github.com/imathis/octopress.git MyBlog <span class="c">#MyBlog修改为你想要的名字</span>
</span><span class="line"><span class="nb">cd </span>MyBlog
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后安装Octopress运行所必需的依赖。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装Octopress的依赖</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler
</span><span class="line">rbenv rehash
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时，Octopress的环境已经被安装好了，下面是安装Octopress的默认主题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装Octopress主题</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至此，Octopress就已经被部署好了。</p>

<p>注意上面<code>gem install bundler</code>有时候会遇到<code>Connection Refused</code>的情况，不明原因，不过加上代理服务器后就成功安装了。如果你也遇到了相关的问题，那么就找一个代理服务器，或者自己搭建一个<code>GoAgent</code>科学上网，这里就不详细叙述了，一切请Google吧。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gem使用代理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler --http-proxy http://localhost:8087
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>### 2.配置Octopress
<code>Octopress</code>的根目录下有四个配置文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Octopress配置文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">_config.yml       # Main config (Jekyll&#39;s settings)
</span><span class="line">Rakefile          # Configs for deployment
</span><span class="line">config.rb         # Compass config
</span><span class="line">config.ru         # Rack config
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一般来说其中只有两个需要进行更改，那就是<code>_config.yml</code>和<code>Rakefile</code>。</p>

<p>首先我们来看<code>_config.yml</code>，一般来说需要更改的地方如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">url: http://yoursite.com
</span><span class="line">title: My Octopress Blog
</span><span class="line">subtitle: A blogging framework for hackers.
</span><span class="line">author: Your Name
</span><span class="line">simple_search: http://google.com/search
</span><span class="line">description:
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将其中的信息换成你的信息，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">url: http://cryonyx.github.com
</span><span class="line">title: Cryonyx
</span><span class="line">subtitle: Geek is an attitude.
</span><span class="line">author: Cryonyx
</span><span class="line">simple_search: http://google.com/search
</span><span class="line">description: This is my personal blog.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要开启博客的评论功能的话，请去<a href="http://disqus.com/">Disqus</a>注册一个帐号，然后把相应的站点<code>shortname</code>填写到相关位置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>disqus</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="text"><span class="line"># Disqus Comments
</span><span class="line">disqus_short_name: Your Site&#39;s Short Name
</span><span class="line">disqus_show_comment_count: false
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更详细（其实也不详细）的介绍请看<a href="http://octopress.org/docs/configuring/">官方文档</a>。</p>

<h3 id="section">2.使用搭建好的博客发文</h3>
<p>做好了基础配置，那么下面就该发布一篇新的文章了来试试了，我当初发布了第一篇Hello World。发布新文章的命令是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>发布新文章</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这条命令会自动在<code>source/_post</code>里生成一个名为<code>yyyy-mm-dd-post-title.markdown</code>的文件，然后你就可以用自己喜欢的编辑器对其进行修改。</p>

<p>假设我们<code>rake new_post["Hello World"]</code>，那么我们会在<code>source/_post</code>下得到<code>2013-08-01-hello-world.markdown</code>，Octopress把文件名自动转换为了小写，而且空格也使用<code>-</code>代替，测试发现，点<code>.</code>也会被<code>dot</code>所代替。</p>

<p>如果不对<code>_config.yml</code>文件中的<code>permalink</code>进行更改的话，那么这篇博文的地址就是<code>http://site.com/blog/2013/08/01/hello-world/index.html</code>。虽然你<code>rake new_post["title"]</code>时的<code>title</code>将作为你的文章的默认标题，但文章的链接地址和它有关，文章的具体标题内容和它无关，后面可以对文章的具体标题进行修改。</p>

<p>我们打开新建的文件，可以看到如下的被称为<code>yaml front matter</code>内容，它包含了文章的基本信息，可以帮助<code>Jkelly</code>正确生成你的文章页面等信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>source/_post/2013-08-01-hello-world.markdown</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class="line"><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Hello</span><span class="nv"> </span><span class="s">World&quot;</span>
</span><span class="line"><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2013-08-01 11:12</span>
</span><span class="line"><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line"><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class="line"><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中<code>layout: post</code>是指调用<code>source/_layout/post.html</code>作为文章模板，<code>title</code>无疑就是文章的标题，默认值是新建文章填入的字符。如果不想让文章被评论的话，可以设置<code>comments</code>为<code>false</code>。而<code>categories</code>自然就是给文章的分类了。</p>

<p>其实可以使用的属性项远不止如此，比如我们还可以加入<code>keywords</code>，<code>description</code>，这样可以生成网页的<code>meta</code>信息，帮助推广。另外如果一篇文章只是草稿，还没有到发布的时候，可以加入<code>published: false</code>，这样文章就不会显示出来了（其实连<code>generate</code>都省了）。</p>

<p>每次都手动输入略显麻烦，我们可以稍微修改一下<code>Rakefile</code>，找到第106行左右的区域：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一目了然，这就是默认的yaml信息模板，相应地进行更改就好，比如加上<code>post.puts "published: true"</code>。</p>

<p>还可以添加上<code>tags</code>，不过tag功能需要另外安装插件，这会在后面一篇博文中提到。</p>

<p>另外需要提醒一下的是，<code>rake_new_post</code>时不能使用中文作为标题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>rake new_post使用中文的错误提示</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;测试中文标题&quot;</span><span class="o">]</span>
</span><span class="line">rake aborted!
</span><span class="line"><span class="c">### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.</span>
</span><span class="line">
</span><span class="line">Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; new_post
</span><span class="line"><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么博客文章能不能使用中文标题呢？当然是可以的，<code>rake new_post</code>的时候给文章起一个英文名，或者用拼音代替，然后修改<code>markdown</code>文件里的<code>title</code>即可以给文章设置中文名了。</p>

<p>另外一个需要注意的地方是，每一个冒号后面都必须要有一个<code>空格</code>，否则会<code>Build Failed</code>。</p>

<p>在<code>---</code>下方写上博客的内容，比如再写一句”Hello World!”，这篇博文就算完成了，保存吧。</p>

<p>然后在博客目录<code>rake generate</code>，这条命令会自动将所有<code>markdown</code>文件转换为<code>html</code>文件。转换完成后<code>rake preview</code>，即可用网址<code>http://localhost:4000</code>在浏览器中预览博客的样子。当<code>rake preview</code>运行的时候，可以对文章的<code>markdown</code>文件继续进行修改，不用再次<code>rake generate</code>，几秒钟的延迟后更改就会体现出来。不过新增文章等一部分操作，都需要再次<code>rake generate</code>才能正确预览。</p>

<p>Octopress博客默认有两个页面，一个是”Blog”，一个是”Archive”，如果想要新增一个页面的话，就需要用<code>rake new_page["page"]</code>命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake new_page<span class="o">[</span>About<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这会在<code>source</code>目录下建立一个<code>About</code>文件夹，其中包含有<code>index.markdown</code>，你可以对其进行修改。</p>

<p>但是新增的页面并不会自动地显示到导航栏上去，还需要进行一定的修改。找到<code>source/_includes/custom/navigation.html</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line">  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在合适的位置添加上<code>&lt;li&gt;&lt;a href="http://blog.cryonyx.tk/about"&gt;About&lt;/a&gt;&lt;/li&gt;</code>即可。</p>

<p>另外博客默认是首页显示每一篇博文所有内容的，如果你不想这么做，那么就需要在博文的合适位置加上<code>&lt;!-- more --&gt;</code>，这可以让首页博文的内容在这里截止，并显示<code>Read On</code>，也就是点击继续阅读。</p>

<h3 id="github">3.将博客推送到Github</h3>
<p>我们现在搭建好了博客，也发了一篇文章，不过还没有把博客部署到github上。</p>

<p>首先你需要一个Github的帐号，并且创建一个名为<code>username.github.com</code>的repository。</p>

<p>记住，名字必须是<code>username.github.com</code>，只有这样才能以网址<code>username.github.com</code>打开你的博客。</p>

<p>然后输入以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake setup_github_pages <span class="c">#它会询问信息，并且进行相应的操作。按照提示进行就好。</span>
</span><span class="line">rake generate
</span><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>setup_github_pages</code>时会让你输入你的repository的git地址，它给出了一个示例是<code>https://github.com/username/username.github.io</code>，但其实不能这么输入，会报错，你得换成<code>https://github.com/username/username.github.com.git</code>。</p>

<p>这样就把网站文件发送到你的repository了，不过目前仅仅是把生成好的网页文件发送了过去，octopress的一套东西包括markdown文件都还在本地呢，这样可不行。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s2">&quot;Backup source&quot;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在就大功告成了，这在你的repository下新建了一个source分支，用来保存你所有的源文件。以后要是本地文件丢失了，恢复就靠它了。</p>

<p>现在，打开浏览器，输入网址<code>http://username.github.com</code>，你应该就能看到你的博客了～欢呼吧。</p>

<p>什么？404？There isn’t a GitHub Page here？没关系，一般情况下这是因为延迟，稍等几分钟再看就好了。如果还是不行的话，检查一下上面的步骤，到<code>https://github.com/username/username.github.com</code>看看是否已经deploy成功，然后再<code>rake deploy</code>一次吧。</p>

<p>下面一篇博文将会讲到一些插件的使用，为博客添加上更丰富的功能，以及在使用这些插件中所遇到的一些问题和解决方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS - Ch2.2 - Analyzing Algorithm]]></title>
    <link href="http://blog.cryonyx.tk/blog/2013/07/31/clrs-2-2-analyzing-algorithm/"/>
    <updated>2013-07-31T22:07:00+08:00</updated>
    <id>http://blog.cryonyx.tk/blog/2013/07/31/clrs-2-2-analyzing-algorithm</id>
    <content type="html"><![CDATA[<p>前面的介绍略过不再记录，直接来看对于Insertion Sort的分析。</p>

<h3 id="analysis-of-insertion-sort---">1.Analysis of insertion sort - 对插入排序的分析</h3>
<p>衡量一个算法的好坏，重要的标准之一当然就是解决问题所需的时间的多少了，通常情况下都是希望运行越快越好。而算法的运行时间并不是固定的，它根据输入数据量的大小而变化。所以通常建立一个以输入数据量大小（input size）<script type="math/tex">n</script>为自变量的函数来表示算法的运行时间（running time）。</p>

<p><code>Input size</code>的定义并不是固定不变的，对于前面提到的插入排序来说，<script type="math/tex">n</script>无非就是数组的大小。对于乘法来说，由于计算机的电子特性，一般用乘数的二进制位数作为衡量。而对于一个图论算法来讲，输入的数据量可能同时由图的节点(Vertices)和边(Edges)两个量组成。</p>

<p><code>Running time</code>在这里暂时被定义为算法对于某一特定输入所需要执行的<code>操作数量</code>，或者说是所需执行的<code>步数</code>，这就把算法的运行时间和具体的计算机独立了开来，所以并不以算法在某一特定电脑上的运行时间为标准来定义算法的运行时间。</p>

<p>假设每一行的操作都需要花费常数项的时间<script type="math/tex">C_i</script>，接下来我们就可以来分析一下插入排序了。</p>

<p>其实CLRS这里的定义略显繁琐，比我在《Data Structure and Algorithm Analysis in C》中看到的描述要复杂上一些，因为其书中将每一个基本操作定义为相同的常数项时间（当然其实乘法所需的时间远大于加法），每一行可以含有多个基本操作，比如for循环的那一行就含有一次赋值，一次比较，与一次自增。而CLRS将每一行所需时间定义为一个常数项，那么有多少行就得有多少个常数项。</p>

<p>–未完待续–</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS - Ch2.1 - Insertion Sort]]></title>
    <link href="http://blog.cryonyx.tk/blog/2013/07/31/clrs-2-1-note/"/>
    <updated>2013-07-31T19:49:00+08:00</updated>
    <id>http://blog.cryonyx.tk/blog/2013/07/31/clrs-2-1-note</id>
    <content type="html"><![CDATA[<h3 id="insertion-sort---">1.Insertion Sort - 插入排序</h3>
<p>插入排序是非常基础的一类排序，它和平时玩扑克牌时摸牌的排序方法几乎一模一样。每当拿到一张牌，我们就从右向左（反向当然也行）依次查看手上的牌的大小，直到找到一张牌比摸到的牌大，就把摸到的牌放到这一张后面。反复摸牌，最后我们就得到了一副从大到小排列的牌。这也符合我个人的打牌习惯。</p>

<p>这个算法非常基础，CLRS本节中也已经对此讲的很清楚了，这里仅仅列出C语言实现。注意书中是从小到大进行的排列。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Insertion Sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">insertionSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">num</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">key</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="cm">/* 为了便于理解，这里设数组大小为num+1，数组从1开始计算下标 */</span>
</span><span class="line">        <span class="n">key</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">key</span><span class="p">){</span>
</span><span class="line">            <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>      <span class="cm">/* 如果前一张牌比当前的牌大则交换两者 */</span>
</span><span class="line">            <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->

<h3 id="loop-invariant---">2.Loop Invariant - 循环不变式</h3>
<p>有时候为了解决某个问题而设计了某个算法后，虽然直觉上觉得这个算法应该能用，而实际的运行也确实能够正确解决这个问题，不过这个算法到底为什么是正确的呢？严谨一点儿的话，就不能仅仅靠直觉来判断了，所以CLRS中引入了<strong>Loop Invariant</strong>的概念，从数学上对算法中循环的正确性进行证明。</p>

<p><strong>Loop Invariant</strong>是数学归纳法的一种变体，它和数学归纳法几乎完全相同，都是先证明一个初始条件为真，然后逐条递推，唯一的区别在于数学归纳法是将归纳步骤无限进行下去，证明了第n步再继续证明第n+1步，而Loop Invariant则是要在某一步停止，也就是当完成了循环的条件时。</p>

<p>书中列出了应用Loop Invariant的三个步骤：</p>

<blockquote>
  <p><strong>Initialization</strong>: It is true prior to the first iteration of the loop.</p>

  <p><strong>Maintenance</strong>: If it is true before an iteration of the loop, it remains true before the next iteration.</p>

  <p><strong>Termination</strong>: When the loop terminates, the invariant gives us a useful property that hepls show that the algorithm is correct.</p>
</blockquote>

<p>然后这里就用循环不变式对上面提到的Insertion Sort进行检验。</p>

<p><strong>Initializaton：</strong>首先，循环的初始条件是<code>i=2</code>，这个时候i指向数组中第2个元素，此时数组<code>A[1...i-1]</code>也就是<code>A[1]</code>仅包含1个元素，所以trivially，这一个元素的数组肯定是排好序的。</p>

<p><strong>Maintenance：</strong>接着，<code>i=2</code>，循环进行第一次iteration。在进行这次循环之前，算法肯定是已经正确排序了<code>A[1]</code>。而注意每次的循环都是从选定的位置开始向左遍历，依次把比它小的牌右移一位，直到找到自己合适的位置。所以第1次循环结束后，数组的前两个元素<code>A[1...2]</code>处于排好序的状态。以此递推，可知第i次循环开始前，<code>A[1...i-1]</code>处于排好序的状态，而当次循环结束以后，第i个数已经被放到了正确的位置，数组<code>A[1...i]</code>无疑包含了已经正确排序的数组，而<code>A[i+1...num]</code>仍旧处于未排序状态。</p>

<p><strong>Termination：</strong>最后就是循环结束了。当循环结束时<code>i=num+1</code>，此时<code>A[1...i-1]</code>就是<code>A[1...num]</code>，也就是整个数组，可知是处于排好序的状态。</p>

<p>至此，就用类似数学归纳法的Loop Invariant将完全由循环构成的Insertion Sort的算法正确性给证明了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试001]]></title>
    <link href="http://blog.cryonyx.tk/blog/2013/07/31/test001/"/>
    <updated>2013-07-31T12:52:00+08:00</updated>
    <id>http://blog.cryonyx.tk/blog/2013/07/31/test001</id>
    <content type="html"><![CDATA[<p>这是Octopress部分功能的测试</p>

<!--more-->

<p>This is some text.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>. Other text.<sup id="fnref:footnote"><a href="#fn:footnote" class="footnote">2</a></sup>.</p>

<pre><code>Here comes some code.
</code></pre>

<p>测试一下数学公式</p>

<p>$X_1, X_2, X_3$</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

<p>段内插入LaTeX代码是这样的：$\exp(-\frac{x^2}{2})$，试试看看吧</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>test <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:footnote">
      <p>必须被引用到才能实现上标 <a href="#fnref:footnote" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archlinux安装小记]]></title>
    <link href="http://blog.cryonyx.tk/blog/2013/07/31/archlinux-installation/"/>
    <updated>2013-07-31T10:07:00+08:00</updated>
    <id>http://blog.cryonyx.tk/blog/2013/07/31/archlinux-installation</id>
    <content type="html"><![CDATA[<p>不知不觉已经使用了Archlinux好几个月的时间了，期间也记录了一些安装使用中遇到的问题，最近又把arch重新装了一遍，这里把整理后的安装记录发上来。</p>

<p>Arch的安装过程是全命令行的，连Debian那样的字符模拟图形界面也不会提供，不过安装过程还是相当简单的。
<!-- more -->
我是从Debian下转到Archlinux，手头正好有一个不用的U盘，于是便按照ArchWiki的说明将U盘写入archlinux的iso镜像。用<code>syslinux</code>的那个方法我试了，但是记得没用，以后哪天再去研究一下吧。</p>

<p><code>lsblk</code>找到u盘的设备名，比如我的是<code>/dev/sdb</code></p>

<p>注意这个方法是会格式化u盘数据的！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>写入USB </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># dd bs=4M if=/home/twtwtw/Downloads/archlinux-2013.07.01-dual.iso of=/dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后重启开始安装Archlinux。</p>

<h3 id="section">1.分区</h3>
<p>使用cfdisk可以很方便的给磁盘分区，我给arch划出了大约200个G，分别划分了/boot 200M，/ 90G，/home 140G，swap 8G。</p>

<h3 id="section-1">2.格式化</h3>
<p>对磁盘进行格式化，可以使用如下的命令，将其中的x替换为对应的磁盘符号</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>格式化 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># mkfs.ext4 /dev/sdx                 //格式化为ext4
</span><span class="line"># mkswap /dev/sdx &amp;&amp; swapon /dev/sdx //格式化swap并挂载</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">3.挂载</h3>
<p>接下来开始挂载分区，此时挂载分区一是为了正常安装系统，二是为了生成fstab，这个文件记录了磁盘挂载的信息，开机后按照文件内容会自动挂载。这里可以把Windos系统的NTFS分区也给挂载上，不过记得后面要装<code>ntfs-3g</code>，否则开机会报错。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>挂载 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># mount /dev/sdx /mnt &lt;!-- 测试 --&gt;
</span><span class="line"># mkdir /mnt/{boot,var,home}
</span><span class="line"># mount /dev/sd{9,10} /mnt/{boot,home}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="pacman">4.调整网络，修改Pacman源</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>调整网络，修改Pacman源 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// dhcpcd、wifi-menu、ifconfig、iwconfig均可使用，我直接连接路由，arch已经自动dhcp
</span><span class="line"># vi /etc/pacman.d/mirrorlist //找到其中的China标记的项，去掉注释</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这些是China的源加在网上找的一些据说不错的源:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/etc/pacman.d/mirrorlist </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="d"><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.163.com/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirror.hust.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.stuhome.net/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//lug.mtu.edu/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirror.umd.edu/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.liquidweb.com/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//cosmos.cites.illinois.edu/pub/archlinux/$repo/os/$arch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="grub-bios">5.安装系统基本组件和grub-bios</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装系统基本组件 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacstrap /mnt base base-devel grub-bios</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="fstab">6.生成fstab</h3>
<p><code>-p</code>这里表示生成以设备名为标识的fstab，比如/dev/sda等
<code>-U</code>标记可以生成UUID为标识的fstab</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>生成fstab </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># genfstab -p /mnt &gt;&gt; /mnt/etc/fstab</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后就等待慢慢下载安装吧。</p>

<h3 id="section-3">7.切换到安装好的系统</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>切换到安装好的系统 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># arch-chroot /mnt</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">8.设置主机名</h3>
<p>主机名写在文件<code>/etc/hostname</code>里边，写入就好。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置主机名 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo Cryo-Nyx &gt; /etc/hostname</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="locale">9.修改locale</h3>
<p>我想要系统仍旧以英文显示各种提示，所以这里仅仅修改<code>LC_CTYPE</code>为<code>zh_CN.UTF-8</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>修改locale </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># vi /etc/locale.conf    //添加LANG=en_US.UTF-8，LC_CTYPE=zh_CN.UTF-8
</span><span class="line"># vi /etc/locale.gen     //取消需要的locale前注释
</span><span class="line"># locale-gen</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">10.设置时区与硬件时钟</h3>
<p>这一步设置本地时区</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置本地时区 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ln -s /usr/share/zoneinfo/Asia/Chongqing /etc/localtime
</span><span class="line"># hwclock --systohc --utc</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-6">11.设置键盘布局</h3>
<p>这一步可以在tty下进行键盘布局的设置，比如交换CapsLock和Escape，方便VIM操作</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置TTY下键盘布局 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># cd /usr/share/kbd/keymaps/i386/qwerty/
</span><span class="line"># cp us.map.gz twtwtw.map.gz
</span><span class="line"># gunzip twtwwt.map.gz
</span><span class="line"># vi twtwtw.map.gz
</span><span class="line">//找到CapsLock和Escape的键位，互换其值
</span><span class="line"># vi /etc/vconsole.conf  //添加`KEYMAP=twtwtw`</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="linux">12.创建引导linux内核的初始环境</h3>
<p><code>-p</code>是preset的意思，也就是以预设的linux配置文件生成。</p>

<p>如果是intel集显的话，可以在<code>/etc/mkinitcpio.conf</code>的<code>MODULE</code>里边添加<code>i915</code>打开KMS。</p>

<p>详情参照这里<a href="https://wiki.archlinux.org/index.php/Intel_Graphics">ArchWiki: Intel Grapchis</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>创建引导linux内核的初始环境 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># vi /etc/mkinitcpio.conf //在MODULES里添加i915
</span><span class="line"># mkinitcpio -p linux</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="grubdevsda">13.安装grub到/dev/sda上并生成初始配置</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装grub </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># grub-install /dev/sda  //将grub安装到sda上
</span><span class="line"># cp /usr/share/locale/en\@quot\LC_MESSAGES /boot/grub/locale/en.mo //不然开机加载grub时会提示en.mo not found
</span><span class="line"># pacman -S os-prober    //如果还装有Win系统的话
</span><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">14.添加用户</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>添加用户 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#useradd -d /home/twtwtw -m twtwtw
</span><span class="line">#usermod -G audio,video,wheel,users,games,optical,storage,lp twtwtw //将用户添加到xxxx各个组</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-8">14.修改初始密码</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>修改初始密码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># passwd //修改root密码
</span><span class="line"># passwd twtwtw //修改用户密码</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-9">15.安装基本系统软件</h2>
<p>安装系统一些基本的软件，这些base包并没有提供。</p>

<p>Archlinux使用ip和netctl工具来进行网络管理，不过以前用惯了ifconfig，这里也一起装上吧。</p>

<p><code>net-tools</code>提供了<code>ifconfig</code>工具
<code>wireless_tools</code>提供了<code>iwconfig</code>和<code>iwlist</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装基本系统软件 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacman -S sudo gksu vim net-tools wireless_tools  dialog wpa_supplicant dhcpcd ntfs-3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后visudo，把自己的用户加上管理员权限</p>

<h3 id="section-10">15.安装桌面环境</h3>
<p>我使用的是<code>Awesome</code>这款wm，并没有使用dm。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装桌面环境 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacman -S xorg-{server,server-utils,utils,xinit} xterm xf86-video-intel mesa alsa-utils feh awesome vicious xcompmgr</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-11">16.安装完成</h3>
<p>安装完成，重启进入系统。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装完成 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># exit
</span><span class="line"># umount -a
</span><span class="line"># reboot</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="xinitrc">17.xinitrc</h3>
<p>修改<code>.xinitrc</code>，添加<code>exec awesome</code>
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>我的.xinitrc</span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="bash"><span class="line"><span class="c">#!/bin/zsh</span>
</span><span class="line">numlockx
</span><span class="line">xbacklight -set 0
</span><span class="line"><span class="c">#setxkbmap -option ctrl:nocaps</span>
</span><span class="line"><span class="nb">exec </span>awesome
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<h3 id="section-12">关于字体</h3>
<p>有几个字体是必下，比如community里的<code>wqy-microhei</code>，<code>wqy-zenhei</code>，还有aur里的<code>ttf-dejavusans-yuanti</code>，以及<code>ttf-droid-sans</code>,<code>ttf-microsoft-yahei</code>也可以装上，都是很不错的字体。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>字体 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacman -S xorg-font-{util,utils,100dpi,75dpi,alias}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-13">常用软件</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>常用软件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">firefox //不解释
</span><span class="line">rdesktop //远程桌面
</span><span class="line">banshee //听歌还不错，不过ncmpcpp作为字符下的也还可以
</span><span class="line">mplayer
</span><span class="line">smplayer
</span><span class="line">chmsee
</span><span class="line">foxitreader //比evince好用
</span><span class="line">gthumb //不错的看图软件
</span><span class="line">bc //命令行下的计算器
</span><span class="line">emacs
</span><span class="line">xbacklight //可以设置笔记本的亮度，对于无法保存亮度的笔记本来说很方便
</span><span class="line">numlockx //自动打开小键盘
</span><span class="line">ibus,ibus-sunpinyin //挺不错的，个人觉得比ibus好用
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>已经安装了好久了，当时也没记录多详细，就这些内容了。</p>

<p>系统配置上的问题，以后想起来了再发吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.cryonyx.tk/blog/2013/07/29/hello-world/"/>
    <updated>2013-07-29T20:12:00+08:00</updated>
    <id>http://blog.cryonyx.tk/blog/2013/07/29/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!</p>

<p>好吧，这是我用Octopress在Github上搭建好博客的第一篇文章。</p>

<p>作为一名技术宅和未来的IT从业人员，怎么能没有自己的技术博客呢。</p>

<p>这个博客将会记录我在学习、生活中所遇到的一些事，主要是作为一种记录，方便以后查询，也算是一种知识管理吧。</p>

<p>希望这次可以把这个博客给坚持写下去。XD</p>
]]></content>
  </entry>
  
</feed>
